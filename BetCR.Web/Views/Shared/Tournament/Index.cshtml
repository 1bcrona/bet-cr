@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using BetCR.Repository.Entity
@using BetCR.Repository.ValueObject
@model List<BetCR.Repository.Entity.Tournament>

@{
    var inviations = (ViewBag.Invitations as List<UserAction> ?? new List<UserAction>()).Where(w => w.ActionType == UserActionType.TOURNAMENT_INVITE).ToList();
}

@section Head
{

    <link rel="stylesheet" href="/static/css/vendor/ajax-bootstrap-select.css">
    <link rel="stylesheet" href="/static/css/modal.css">

    <style type="text/css">
        span.tournament-name {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>

}

<div class="row">
<div class="col-lg-3">
    <!-- Tab navs -->

    <div class="nav flex-column nav-tabs text-center"
         id="v-tabs-tab"
         role="tablist"
         aria-orientation="vertical">
        <a class="nav-link active"
           id="v-your-tournaments-tab"
           data-bs-toggle="tab"
           data-toggle="tab"
           data-bs-target="#v-your-tournaments"
           data-target="#v-your-tournaments"
           role="tab"
           style="cursor: pointer"
           aria-controls="v-your-tournaments"
           aria-selected="true">
            Your Tournaments
        </a>

        <a class="nav-link"
           id="v-create-tournament-tab"
           data-bs-toggle="tab"
           data-toggle="tab"
           data-bs-target="#v-create-tournament"
           data-target="#v-create-tournament"
           role="tab"
           style="cursor: pointer"
           aria-controls="v-create-tournament"
           aria-selected="false">
            Create Tournament
        </a>
        <a class="nav-link"
           id="v-pending-invitations-tab"
           data-bs-toggle="tab"
           data-toggle="tab"
           data-bs-target="#v-pending-invitations"
           data-target="#v-pending-invitations"
           role="tab"
           style="cursor: pointer"

           aria-controls="v-pending-invitations"
           aria-selected="false">
            Pending Invitations

            @{
                if (inviations.Count > 0)
                {
                    <span class="badge bg-danger ms-2">@inviations.Count</span>
                }
            }
        </a>
    </div>
</div>

<div class="col-lg-9">
<!-- Tab content -->
<div class="tab-content" id="v-tabs-tabContent">
<div class="tab-pane fade show active"
     id="v-your-tournaments"
     role="tabpanel"
     aria-labelledby="v-your-tournaments-tab">

    <div class="accordion accordion-flush" id="aTournaments">

        @foreach (var tournament in Model)
        {
            var isOwner = @tournament.Owner.Id == ViewBag.UserId;
            var disContinued = DateTimeOffset.UtcNow.ToUnixTimeSeconds() > @tournament.TournamentEndDateEpoch;
            <div class="accordion-item">

                <h2 class="accordion-header" id="flush-headingOne">
                    <button class="accordion-button collapsed"
                            type="button"
                            data-toggle="collapse"
                            data-mdb-toggle="collapse"
                            data-mdb-target="#o-@tournament.Id"
                            data-target="#o-@tournament.Id"
                            aria-expanded="false"
                            aria-controls="#o-@tournament.Id">
                        @tournament.TournamentName
                    </button>
                </h2>

                <div id="o-@tournament.Id"
                     class="accordion-collapse collapse"
                     data-parent="#aTournaments"
                     data-bs-parent="#aTournaments"
                     data-mdb-parent="#aTournaments"
                     aria-labelledby="h-@tournament.Id">
                    <div class="accordion-body">
                        <div class="row">
                            <div class="col-lg-12 justify-content-center align-items-center">
                                <div class="card">
                                    <div class="card-header text-center">
                                        <h7>Tournament Details</h7>
                                    </div>

                                    <div class="card-body">
                                        <div class="row">
                                            <div class="@(isOwner ? "col-lg-3" : "col-lg-12")">
                                                <form id="fTournament_@tournament.Id"
                                                      class="request-form tournament-form"
                                                      data-id="@tournament.Id"
                                                      novalidate>
                                                    <div class="d-flex">
                                                        <div class="form-group has-feedback-left mr-2">
                                                            <label class="label">Type</label>
                                                        </div>
                                                        <div class="form-group  has-feedback-left ml-2">
                                                            <label class="label">@(tournament.IsPrivate ? "Private" : "Public")</label>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex">
                                                        <div class="form-group has-feedback-left mr-2">
                                                            <label class="label">Start Date</label>
                                                        </div>
                                                        <div class="form-group  has-feedback-left ml-2">
                                                            <label class="label">@(tournament.TournamentStartDate.Local.ToShortDateString())</label>
                                                        </div>
                                                    </div>

                                                    <div class="d-flex">
                                                        <div class="form-group has-feedback-left mr-2">
                                                            <label class="label">End Date</label>
                                                        </div>
                                                        <div class="form-group  has-feedback-left ml-2">
                                                            <label class="label">@(tournament.TournamentEndDate.Local.ToShortDateString())</label>
                                                        </div>
                                                    </div>

                                                    @{
                                                        if (!isOwner && !disContinued)
                                                        {
                                                            <div class="form-group">
                                                                <input type="submit" id="sLeaveTournament" value="Leave" class="btn btn-danger"/>
                                                            </div>
                                                        }
                                                    }
                                                </form>
                                            </div>

                                            @{
                                                if (isOwner && !disContinued)
                                                {
                                                    <div class="col-lg-9 justify-content-center align-items-center">

                                                        <form id="fTournamentInvite_@tournament.Id"
                                                              class="request-form invite-form"
                                                              novalidate>

                                                            <div class="row">
                                                                <div class="col-6">
                                                                    <select class="selectpicker show-tick" data-tournament-id="@tournament.Id" data-live-search="true">
                                                                    </select>
                                                                </div>

                                                                <div class="col-lg-6">

                                                                    <div class="d-flex">
                                                                        <div class="form-group">
                                                                            <input type="submit"
                                                                                   id="sInviteUser"
                                                                                   value="Invite"
                                                                                   class="btn btn-success  px-4"/>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </form>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="tab-pane fade"
     id="v-create-tournament"
     role="tabpanel"
     aria-labelledby="v-create-tournament-tab">

    <section>
        <div id="dCreateTournament" class="container">
            <form id="fCreateTournament" method="POST" class="request-form">

                <h2>Create Tournament</h2>
                <div class="form-group has-error">

                    <label for="iCreateTournament" class="label">Tournament Name</label>
                    <input type="text"
                           name="TournamentName"
                           class="form-control"
                           id="iCreateTournament"
                           required
                           autofocus/>
                </div>
                <div class="form-group  has-error ">
                    <label for="iPassword" class="label">Password</label>
                    <input type="password"
                           id="iPassword"
                           name="Password"
                           class="form-control"
                           placeholder="Password"
                           required/>
                </div>

                <div class="d-flex">
                    <div class="form-group mr-2">
                        <label for="" class="label">Start Date</label>
                        <input type="date"
                               class="form-control"
                               placeholder="Date"
                               id="dStartDate"
                               onkeydown="return false"
                               name="StartDateString"
                               required/>
                    </div>
                    <div class="form-group ml-2">
                        <label for="" class="label">End Date</label>
                        <input type="date"
                               class="form-control"
                               id="dEndDate"
                               name="EndDateString"
                               onkeydown="return false"
                               placeholder="Date"
                               required/>
                    </div>
                </div>

                <div class="form-group mt-3">
                    <input type="submit"
                           id="sCreateTournament"
                           value="Create"
                           class="btn btn-primary py-3 px-4" disabled/>
                </div>
            </form>
        </div>
    </section>
</div>
<div class="tab-pane fade"
     id="v-pending-invitations"
     role="tabpanel"
     aria-labelledby="v-tabs-pending-invitations-tab">
    <section>
        <div id="dPendingInvitations" class="container">
            <div class="list-group">
                @{
                    var orderedInvitations = inviations.OrderByDescending(o => o.ActionDateEpoch);

                    foreach (var invitation in orderedInvitations)
                    {
                        <div class="list-group-item list-group-item-action" aria-current="true">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1">
                                    Tournament Invitation
                                    @{
                                        if (invitation.ActionStatus == UserActionStatus.WAITING_FOR_REPLY)
                                        {
                                            <span class='badge bg-danger ms-2'>New</span>
                                        }
                                    }
                                </h5>
                                <small>@invitation.ActionDate.Local.ToString()</small>
                            </div>
                            <p class="mb-1">
                                <strong>@invitation.FromUser.FullName</strong> invited you to join their tournament! Would you like to join?
                            </p>
                            <div class="btn-group shadow-0" role="group">
                                <button type="button" data-response-type="1" data-tournament-id="@invitation.ActionObject" data-invitation-id="@invitation.Id" class="btn  btn-success" data-mdb-color="dark">Yes</button>
                                <button type="button" data-response-type="0" data-tournament-id="@invitation.ActionObject" data-invitation-id="@invitation.Id" class="btn btn-danger" data-mdb-color="dark">No</button>
                            </div>
                        </div>
                    }

                }
            </div>
        </div>
    </section>
</div>
</div>
</div>
</div>

@section Scripts
{

    <script src="/static/js/modal.js"></script>
    <script src="/static/js/vendor/jbvalidator.js"></script>
    <script src="/static/js/vendor/ajax-bootstrap-select.js"></script>

    <script type="text/javascript">

        $(".list-group-item button").click(function (e) {
            e.preventDefault();
            e.stopPropagation();

            let target = this;

            let invitationId = $(target).data("invitation-id");
            let tournamentId = $(target).data("tournament-id");
            let response = $(target).data("response-type");

            let params = {}

            params.InvitationId = invitationId;
            params.TournamentId = tournamentId;
            params.Response = response;

            const url = `/api/UserTournament/invite/respond`

            $.ajax({
                url: url,
                type: "POST",
                data: JSON.stringify(params),
                contentType: "application/json",
                dataType: "json",
                success: function (data) {
                    const modalFadeSeconds = 2;
                    let modalData = `<br>${data.result}</br>`;
                    if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                    const modal = $("#dPendingInvitations").addModal({
                        id: "successModal",
                        modalContent: modalData,
                        closeTimer: modalFadeSeconds,
                        modalState: "success",
                        afterCloseAction:
                            function () {
                                window.location.reload();
                            }

                    });
                    modal.modalElement.show();
                },
                error: function (err) {
                    const data = err.responseJSON;
                    const modalFadeSeconds = 2;
                    let modalData = `<br>${data.Result}</br> <br>${data.ErrorMessage}</br>`;
                    if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                    const modal = $("#dPendingInvitations").addModal({
                        id: "errorModal",
                        modalContent: modalData,
                        closeTimer: modalFadeSeconds,
                        modalState: "error"
                    });
                    modal.modalElement.show();
                }
            });

        });

        $(".tournament-form").submit(function (e) {
            const id = $(this).attr("data-id");
            const url = `/api/UserTournament/${id}`

            $.ajax({
                url: url,
                type: "DELETE",
                success: function (data) {
                    const modalFadeSeconds = 2;
                    let modalData = `<br>${data.result}</br>`;
                    if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                    const modal = $("#fTournament").addModal({
                        id: "successModal",
                        modalContent: modalData,
                        closeTimer: modalFadeSeconds,
                        modalState: "success",
                        afterCloseAction:
                            function () {
                                window.location.reload();
                            }

                    });
                    modal.modalElement.show();
                },
                error: function (err) {
                    const data = err.responseJSON;
                    const modalFadeSeconds = 2;
                    let modalData = `<br>${data.Result}</br> <br>${data.ErrorMessage}</br>`;
                    if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                    const modal = $("#fTournament").addModal({
                        id: "errorModal",
                        modalContent: modalData,
                        closeTimer: modalFadeSeconds,
                        modalState: "error"
                    });
                    modal.modalElement.show();
                }
            });
        });

        $(".invite-form").submit(function (e) {
            e.preventDefault();
            e.stopPropagation();

            let target = e.target;
            let picker = $(this).find('.selectpicker');

            let tournamentId = $(picker).data("tournament-id");
            let toUserId = $(picker).val();

            const url = `/api/UserTournament/invite`

            let params = {}

            params.TournamentId = tournamentId;
            params.InviteeUserId = toUserId;

            $.ajax({
                url: url,
                type: "POST",
                data: JSON.stringify(params),
                contentType: "application/json",
                dataType: "json",
                success: function (data) {
                    const modalFadeSeconds = 2;
                    let modalData = `<br>${data.result}</br>`;
                    if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                    const modal = $(target).addModal({
                        id: "successModal",
                        modalContent: modalData,
                        closeTimer: modalFadeSeconds,
                        modalState: "success",
                        afterCloseAction:
                            function () {
                                window.location.reload();
                            }

                    });
                    modal.modalElement.show();
                },
                error: function (err) {
                    const data = err.responseJSON;
                    const modalFadeSeconds = 2;
                    let modalData = `<br>${data.Result}</br>`;
                    if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                    const modal = $(target).addModal({
                        id: "errorModal",
                        modalContent: modalData,
                        closeTimer: modalFadeSeconds,
                        modalState: "error"
                    });
                    modal.modalElement.show();
                }
            });
        });

        $(document).ready(function () {

            const validator = $("#fCreateTournament").jbvalidator({
                errorMessage: true,
                successClass: true,
                errorMessageHandler: function (el, message) {
                    $(el).removeClass("success");
                    $(el).addClass("error");
                    $(el).attr('title', message)
                        .attr('data-original-title', message)
                        .attr('data-bs-original-title', message)
                        .attr('data-mdb-original-title', message)
                        .tooltip('update')
                    if ($(el).val() !== "") {
                        $(el).tooltip('show');
                    }

                    $("#fCreateTournament input[type = submit]").prop('disabled', true);
                },
                successMessageHandler: function (el, event) {
                    $(el).addClass("success");
                    $(el).removeClass("error");
                    $(el).attr('title', "")
                        .attr('data-original-title', "")
                        .attr('data-bs-original-title', "")
                        .attr('data-mdb-original-title', "")
                        .tooltip('update')
                        .tooltip('hide');

                    if ($(".error").length === 0) {
                        $("#fCreateTournament input[type=submit]").prop('disabled', false);
                    }

                }
            });
            validator.validator.custom = function (el, event) {
                if ($(el).is("[name=StartDateString]")) {

                    const endDate = Date.parse(`${$("[name=EndDateString]").val()}`);
                    const startDate = Date.parse(`${$("[name=StartDateString]").val()}`);
                    if (startDate >= endDate) {
                        return "Start date must be lower than end date";
                    }
                    if (Date.now() > startDate) {
                        return "Start date must be higher than now";
                    }
                }

                if ($(el).is("[name=EndDateString]")) {

                    const endDate = Date.parse(`${$("[name=EndDateString]").val()}`);
                    const startDate = Date.parse(`${$("[name=StartDateString]").val()}`);
                    if (startDate >= endDate) {
                        return "Start date must be lower than end date";
                    }
                    if (Date.now() > startDate) {
                        return "Start date must be higher than now";
                    }
                }

            };

            $("#fCreateTournament").submit(function (e) {
                e.preventDefault();
                e.stopPropagation();

                let form = this;

                const formString = JSON.stringify($(form).serializeObject());
                let params = JSON.parse(formString);
                let url = "/api/UserTournament";
                $.ajax({
                    url: url,
                    type: "POST",
                    data: JSON.stringify(params),
                    contentType: "application/json",
                    dataType: "json",
                    success: function (data) {
                        const modalFadeSeconds = 2;
                        let modalData = `<br>${data.result}</br>`;
                        if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                        const modal = $("#fCreateTournament").addModal({
                            id: "successModal",
                            modalContent: modalData,
                            closeTimer: modalFadeSeconds,
                            modalState: "success",
                            afterCloseAction:
                                function () {
                                    window.location.reload();
                                }

                        });
                        modal.modalElement.show();
                    },
                    error: function (err) {
                        const data = err.responseJSON;
                        const modalFadeSeconds = 2;
                        let modalData = `<br>${data.Result}</br> <br>${data.ErrorMessage}</br>`;
                        if (data.returnUrl) modalData = ` ${modalData} <br>You will be redirected to next page after ${modalFadeSeconds} seconds</br>`;

                        const modal = $("#fCreateTournament").addModal({
                            id: "errorModal",
                            modalContent: modalData,
                            closeTimer: modalFadeSeconds,
                            modalState: "error"
                        });
                        modal.modalElement.show();
                    }
                });

            })

            $(".selectpicker").each((index, element) => {
                $(element).selectpicker({ liveSearch: true })
                    .ajaxSelectPicker({
                        ajax: {

                            url: '/api/UserTournament/searchuser',
                            type: 'POST',

                            data: function () {
                                var params = {};
                                let email = $(element).parent().find(".bs-searchbox input").val();
                                params.Email = email;
                                params.Id = email;
                                params.TournamentId = $(element).data("tournament-id");
                                return params;
                            }
                        },
                        locale: {
                            emptyTitle: 'Email Address'
                        },
                        requestDelay: 500,
                        minLength: 5,
                        preprocessData: function (result) {
                            var contacts = [];
                            const data = result.data

                            $(data).each((index, element) => {

                                let contact = {};
                                contact.value = element.user.id;
                                contact.text = element.user.email;
                                contact.disabled = element.isRegisteredToTournament;
                                contact.data = {}
                                contact.data.icon = "fas fa-user-circle";
                                contact.data.subText = element.isRegisteredToTournament ? "Already Registed" : "";
                                contacts.push(contact);
                            });

                            return contacts;
                        },
                        preserveSelected: true
                    });
            })

        });
    </script>

}