@using BetCR.Repository.ValueObject
@model BetCR.Repository.Entity.Match

@{
    var validEvents = new Dictionary<string, string>
    {
        {
            "R_CARD", "Red Card"
        },
        {
            "PEN_SCORED", "Penalty Scored"
        },
        {
            "GOAL", "Goal"
        },
        {
            "OWN_GOAL", "Own Goal"
        },
        {
            "Y_CARD", "Yellow Card"
        },
        {
            "SUBST", "Substitution"
        }
    };
    var allEvents = new List<Tuple<int, Event>>();
    allEvents.AddRange(Model.MatchEvent?.Events?.HomeTeamEvents?.Select(s => Tuple.Create(-1, s)) ?? Array.Empty<Tuple<int, Event>>());
    allEvents.AddRange(Model.MatchEvent?.Events?.AwayTeamEvents?.Select(s => Tuple.Create(1, s)) ?? Array.Empty<Tuple<int, Event>>());
    var orderedEvents = allEvents.Where(w => validEvents.ContainsKey(w.Item2.EventType ?? "")).OrderBy(o => o.Item2.Elapsed).ToList();
    var homeLineupGroup = Model?.MatchEvent?.MatchLineup.HomeTeamLineup.Where(w => w.StartingXI).GroupBy(g => g.Position).ToDictionary(g => g.Key);
    var awayLineupGroup = Model?.MatchEvent?.MatchLineup.AwayTeamLineup.Where(w => w.StartingXI).GroupBy(g => g.Position).ToDictionary(g => g.Key);
    var homeTeam = Model?.HomeTeam;
    var awayTeam = Model?.AwayTeam;

}
<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.6.0/mdb.min.css" rel="stylesheet"/>
    <link href="/static/css/site.css"
          rel="stylesheet"/>
    <link href="/static/css/timeline.css"
          rel="stylesheet"/>
    <link href="https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800&amp;display=swap" rel="stylesheet">
    <title>Match Details</title>
</head>
<div class="container">
    <div class="row">
        <div class="card margin-bottom-20">
            <div class="card-header">
                <div class="row text-left">
                    <div class="col-6 text-right" style="border: 0 solid #ddd;border-right-width: 1px;">
                        <h5>@Model?.MatchDate.Local.ToShortDateString()</h5>
                    </div>
                    <div class="col-6 text-left">
                        <h5 >@Model?.MatchDate.Local.ToShortTimeString()</h5>
                    </div>
                </div>
                <div class="row">
                    <div class="col-4 align-self-center">
                        @{
                            var homeTeamFormation = $"{homeLineupGroup?.GetValueOrDefault("DEFENDER")?.Count() ?? 0} - {homeLineupGroup?.GetValueOrDefault("MIDFIELDER")?.Count() ?? 0} - {homeLineupGroup?.GetValueOrDefault("FORWARD")?.Count() ?? 0}";
                            await Html.RenderPartialAsync("Match/_MatchTeamInfo", homeTeam, new ViewDataDictionary(ViewData)
                            {
                                {
                                    "team_formation", homeTeamFormation
                                },
                                {
                                    "team_type", "Home"
                                }
                            });
                        }
                    </div>
                    <div class="col-4 align-self-center">
                        @{
                            await Html.RenderPartialAsync("Match/_MatchDetailScore", Model.MatchEvent);
                        }
                    </div>
                    <div class="col-4 align-self-center">
                        @{
                            var awayTeamFormation = $"{awayLineupGroup?.GetValueOrDefault("DEFENDER")?.Count() ?? 0} - {awayLineupGroup?.GetValueOrDefault("MIDFIELDER")?.Count() ?? 0} - {awayLineupGroup?.GetValueOrDefault("FORWARD")?.Count() ?? 0}";
                            await Html.RenderPartialAsync("Match/_MatchTeamInfo", awayTeam, new ViewDataDictionary(ViewData)
                            {
                                {
                                    "team_formation", awayTeamFormation
                                },
                                {
                                    "team_type", "Away"
                                }
                            });
                        }
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        @{
                            var homeGoals = Model?.MatchEvent?.Events?.HomeTeamEvents?.Where(w => w.EventType is "GOAL" or "PEN_SCORED");
                            var awayTeamOwnGoals = Model?.MatchEvent?.Events?.AwayTeamEvents?.Where(w => w.EventType == "OWN_GOAL");
                            if (awayTeamOwnGoals != null)
                            {
                                homeGoals = homeGoals?.Concat(awayTeamOwnGoals);
                            }
                            var orderedHomeGoals = homeGoals.OrderBy(s =>
                            {
                                var minute = s.Elapsed + s.ElapsedPlus;
                                return minute;
                            }).Select(s => new
                            {
                                Event = s,
                                ActualMinute = s.ElapsedPlus == 0 ? $"{s.Elapsed}" : $"{s.Elapsed}+{s.ElapsedPlus}"
                            }).ToList();


                            foreach (var item in orderedHomeGoals)
                            {
                                var name = item.Event.EventType == "OWN_GOAL" ? item.Event.Player1.FullName + "(OG)" : item.Event.Player1.FullName;
                                <div class="text-left text-uppercase">
                                    <h8>@name @item.ActualMinute'</h8>
                                </div>
                            }
                        }
                    </div>
                    <div class="col-6">
                        @{
                            var awayGoals = Model?.MatchEvent?.Events?.AwayTeamEvents?.Where(w => w.EventType is "GOAL" or "PEN_SCORED");
                            var homeTeamOwnGoals = Model?.MatchEvent?.Events?.HomeTeamEvents?.Where(w => w.EventType == "OWN_GOAL");
                            if (homeTeamOwnGoals != null)
                            {
                                awayGoals = awayGoals?.Concat(homeTeamOwnGoals);
                            }
                            var orderedAwayGoals = awayGoals.OrderBy(s =>
                            {
                                var minute = s.Elapsed + s.ElapsedPlus;
                                return minute;
                            }).Select(s => new
                            {
                                Event = s,
                                ActualMinute = s.ElapsedPlus == 0 ? $"{s.Elapsed}" : $"{s.Elapsed}+{s.ElapsedPlus}"
                            }).ToList();


                            foreach (var item in orderedAwayGoals)
                            {
                                var name = item.Event.EventType == "OWN_GOAL" ? item.Event.Player1.FullName + "(OG)" : item.Event.Player1.FullName;
                                <div class="text-right text-uppercase">
                                    <h8>@name @item.ActualMinute'</h8>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            @{
                var homeColors = Model.HomeTeam.DominantColors?.Split(";").ToList();
                var awayColors = Model.AwayTeam.DominantColors?.Split(";").ToList();
            }
            <div class="row">
                <div class="col-md-12">
                    @{ await Html.RenderPartialAsync("Match/_MatchTeamSubs",
                           Model.MatchEvent.MatchLineup.HomeTeamLineup.Where(w => !w.StartingXI),
                           new ViewDataDictionary(ViewData)
                           {
                               {
                                   "colors", homeColors
                               }
                           }
                           ); }
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="row">
                <div class="col-md-2">
                </div>
            </div>
            <div class="row">
                @{ await Html.RenderPartialAsync("Match/_MatchPitch", Model, new ViewDataDictionary(ViewData)
                   {
                       {
                           "events", allEvents
                       }
                   }); }
            </div>
            <div class="d-none  d-lg-block">
                @{ await Html.RenderPartialAsync("Match/_MatchTimeline", orderedEvents, new ViewDataDictionary(ViewData)
                   {
                       {
                           "home_colors", homeColors
                       },
                       {
                           "away_colors", awayColors
                       },
                       {
                           "home_team", Model.HomeTeam
                       },
                       {
                           "away_team", Model.AwayTeam
                       },
                       {
                           "valid_events", validEvents
                       }
                   }); }

            </div>
            <div class="d-block d-lg-none">
                @{ await Html.RenderPartialAsync("Match/_MatchTimelineVertical", orderedEvents, new ViewDataDictionary(ViewData)
                   {
                       {
                           "home_colors", homeColors
                       },
                       {
                           "away_colors", awayColors
                       },
                       {
                           "home_team", Model.HomeTeam
                       },
                       {
                           "away_team", Model.AwayTeam
                       },
                       {
                           "valid_events", validEvents
                       }
                   }); }
            </div>

        </div>
        <div class="col-md-2">
            <div class="row">
                <div class="col-md-12">
                    @{ await Html.RenderPartialAsync("Match/_MatchTeamSubs",
                           Model.MatchEvent.MatchLineup.AwayTeamLineup.Where(w => !w.StartingXI),
                           new ViewDataDictionary(ViewData)
                           {
                               {
                                   "colors", awayColors
                               }
                           }
                           ); }
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.6.0/mdb.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

    });
</script>