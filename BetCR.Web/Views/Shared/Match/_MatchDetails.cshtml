@using BetCR.Repository.Entity
@using Newtonsoft.Json
@using BetCR.Repository
@using BetCR.Repository.ValueObject
@model BetCR.Repository.Entity.Match

@{

    var validEvents = new Dictionary<string, string> { { "R_CARD", "RED CARD" }, { "PEN_SCORED", "PENALTY" }, { "GOAL", "GOAL" }, { "OWN_GOAL", "OWN GOAL" }, { "Y_CARD", "YELLOW CARD" }, { "SUBST", "SUBSTITUTION" } };
    var allEvents = new List<Tuple<int, Event>>();
    allEvents.AddRange(Model.MatchEvent?.Events?.HomeTeamEvents?.Select(s => Tuple.Create(-1, s)) ?? Array.Empty<Tuple<int, Event>>());
    allEvents.AddRange(Model.MatchEvent?.Events?.AwayTeamEvents?.Select(s => Tuple.Create(1, s)) ?? Array.Empty<Tuple<int, Event>>());
    var orderedEvents = allEvents.Where(w => validEvents.ContainsKey(w.Item2.EventType)).OrderBy(o => o.Item2.Elapsed).ToList();
    var homeLineupGroup = Model.MatchEvent.MatchLineup.HomeTeamLineup.Where(w => w.StartingXI).GroupBy(g => g.Position).ToDictionary(g => g.Key);
    var awayLineupGroup = Model.MatchEvent.MatchLineup.AwayTeamLineup.Where(w => w.StartingXI).GroupBy(g => g.Position).ToDictionary(g => g.Key);

}
<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.6.0/mdb.min.css"
          rel="stylesheet" />
    <link href="/static/css/site.css"
          rel="stylesheet" />
    <link href="/static/css/timeline.css"
          rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800&amp;display=swap" rel="stylesheet">
</head>
<div class="container">
    <div class="row">
        <div class="col-md-4 align-self-center">
            <div class="row">
                <div class="col-md-6">
                    <div class="bg-image hover-overlay ripple d-md-none d-lg-block align-items-center" data-bs-ripple-color="light">
                        <img src='@(Model?.HomeTeam?.TeamLogo)'
                             class="img-fluid"
                             data-team-name="@Model?.HomeTeam?.Name" data-toggle="tooltip" data-placement="bottom"
                             title="@Model?.HomeTeam?.Name" />
                        <a href="#!" data-toggle="tooltip" data-placement="bottom"
                           title="@Model?.HomeTeam?.Name">
                            <div class="mask" style="background-color: rgba(251, 251, 251, 0.15)"></div>
                        </a>
                    </div>
                </div>

                <div class="col-md-6 text-left d-none d-md-block align-self-center">
                    <p class="text-muted text-uppercase mb-0">
                        <strong>@Model.HomeTeam.Name</strong>
                    </p>
                    <h6><small class="text">@(homeLineupGroup.GetValueOrDefault("DEFENDER")?.Count()??0) - @(homeLineupGroup.GetValueOrDefault("MIDFIELDER")?.Count()??0) - @(homeLineupGroup.GetValueOrDefault("FORWARD")?.Count()??0) </small></h6>
                </div>
            </div>
        </div>

        <div class="col-md-4 align-self-center">

            <div class="row align-items-top">

                <div class="col-md-6 text-right d-none d-md-block" style="border: solid 1px;border-width: 0px 1px 0px 0px;border-color: #ddd">
                    <label style="font-size: 12px">@Model.MatchDate.Local.ToShortDateString()</label>
                </div>

                <div class="col-md-6 text-left d-none d-md-block">
                    <label style="font-size: 12px">@Model.MatchDate.Local.ToShortTimeString()</label>
                </div>
            </div>

            <div class="row  align-items-center">

                <div class="col-md-5"><h1>@Model.MatchEvent.HomeTeamScore</h1> </div>
                <div class="col-md-2"><h5>:</h5> </div>
                <div class="col-md-5"><h1>@Model.MatchEvent.AwayTeamScore</h1> </div>
            </div>
        </div>

        <div class="col-md-4 align-self-center">
            <div class="row">

                <div class="col-md-6 text-right d-none d-md-block align-self-center">
                    <p class="text-muted text-uppercase mb-0">
                        <strong>@Model.AwayTeam.Name</strong>
                    </p>
                    <h6><small class="text">@(awayLineupGroup.GetValueOrDefault("DEFENDER")?.Count()??0) - @(awayLineupGroup.GetValueOrDefault("MIDFIELDER")?.Count()??0) - @(awayLineupGroup.GetValueOrDefault("FORWARD")?.Count()??0) </small></h6>
                </div>
                <div class="col-md-6 ">
                    <div class="bg-image hover-overlay ripple d-md-none d-lg-block align-items-center" data-bs-ripple-color="light">
                        <img src='@(Model?.AwayTeam?.TeamLogo)'
                             class="img-fluid"
                             data-team-name="@Model?.AwayTeam?.Name" data-toggle="tooltip" data-placement="bottom"
                             title="@Model?.AwayTeam?.Name" />
                        <a href="#!" data-toggle="tooltip" data-placement="bottom"
                           title="@Model?.AwayTeam?.Name">
                            <div class="mask" style="background-color: rgba(251, 251, 251, 0.15)"></div>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-2">
            @{
                var colorPaletteHome = Model.HomeTeam.DominantColors?.Split(";").ToList();
                var homeDomColor1 = colorPaletteHome?.FirstOrDefault() ?? "#fff";
                var homeDomColor2 = colorPaletteHome?.Skip(1).FirstOrDefault() ?? "#000";
                var colorPaletteAway = Model.AwayTeam.DominantColors?.Split(";").ToList();
                var awayDomColor1 = colorPaletteAway?.FirstOrDefault() ?? "#fff";
                var awayDomColor2 = colorPaletteAway?.Skip(1).FirstOrDefault() ?? "#000";
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <h5 class="card-header text-center" style="background-color: @homeDomColor2; color: @homeDomColor1">
                            SUBS
                        </h5>
                        <div class="card-body">
                            @{ await Html.RenderPartialAsync("Match/_TeamLineup", Model.MatchEvent.MatchLineup.HomeTeamLineup.Where(w => !w.StartingXI), new ViewDataDictionary(ViewData) { { "background-color", homeDomColor2 }, { "color", homeDomColor1 } });}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="row">
                <div class="col-md-2">
                </div>
            </div>
            <div class="row">
                @{ await Html.RenderPartialAsync("Match/_MatchPitch", Model, new ViewDataDictionary(ViewData) { { "events", allEvents } });}
            </div>

            @{
                if (orderedEvents.Any())
                {
                    <div class="row mb-5">
                        <div class="mt-5 mb-5">
                            <div class="timeline">
                                <div class="timeline--inner">

                                    @{

                                        var matchMaxMinutes = Math.Max(orderedEvents.Max(m => m.Item2.Elapsed), 90) > 90 ? 120 : 90;
                                        var pinLabels = new Dictionary<string, int>() { { "MS", 0 }, { "HT", 45 }, { "FT", 90 } };
                                        if (matchMaxMinutes > 90)
                                        {
                                            pinLabels.Add("ET", 120);
                                        }

                                        var lefts = new List<int>();

                                        foreach (var pin in pinLabels)
                                        {
                                            var left = pin.Value * 100 / matchMaxMinutes;
                                            <div class="timeline--inner-pin is-featured text-center d-flex align-items-center justify-content-center" data-title="Featured Pin" style="left: @left%; background-color: #495057; color: #EEEEEE">
                                                <label>@pin.Key</label>
                                            </div>
                                            lefts.Add(left);
                                        }

                                        var ndx = 0;

                                        var minuteGroupedOrderedItems = orderedEvents.GroupBy(g => g.Item2.Elapsed);

                                        foreach (var groupedItem in minuteGroupedOrderedItems)
                                        {

                                            var i = 0;
                                            foreach (var (item1, item2) in groupedItem)
                                            {

                                                int currentItemLeft;
                                                while (true)
                                                {
                                                    var currentPinValue = pinLabels.ElementAt(ndx).Value;
                                                    var isLeftFound = Math.Max(groupedItem.Key, currentPinValue) <= currentPinValue;

                                                    if (isLeftFound)
                                                    {
                                                        ndx--;
                                                        currentItemLeft = lefts[ndx];
                                                        break;
                                                    }
                                                    ndx++;

                                                }

                                                var currentItemTop = item1 * 15 + i * item1 * 15;

                                                var distanceBetweenCurrentAndNext = pinLabels.ElementAt(ndx + 1).Value - pinLabels.ElementAt(ndx).Value;
                                                var pinDistanceBetweenCurrentAndNext = lefts[ndx + 1] - lefts[ndx];
                                                var distanceBetweenCurrentMinuteAndLeftMinute = groupedItem.Key - pinLabels.ElementAt(ndx).Value;

                                                var marginStep = 5;
                                                var firstStep = currentItemLeft + marginStep;
                                                var maxItemStep = pinDistanceBetweenCurrentAndNext - marginStep - 2;

                                                var currentStep = $"{(int)(firstStep + (double)distanceBetweenCurrentMinuteAndLeftMinute / (double)distanceBetweenCurrentAndNext * maxItemStep)}%";
                                                var currentEventTop = $"{currentItemTop}px";
                                                var minute = groupedItem.Key.ToString();
                                                if (item2.ElapsedPlus > 0)
                                                {
                                                    minute = $"{minute}+{item2.ElapsedPlus}'";
                                                }
                                                <div class="timeline--inner-pin is-normal" style="top: @currentEventTop; left: @currentStep; background-color: @(item1 < 0 ? homeDomColor1 : awayDomColor1); color: @(item1 < 0 ? homeDomColor2 : awayDomColor2)" data-title="@minute">
                                                    <div class="tooltip text-center" style="color: @(item1 < 0 ? homeDomColor2 : awayDomColor2); font-size: 10px;">
                                                        <div class="bottom">
                                                            <div class="row">
                                                                <div class="col-md-6 timeline-item border-right" style="">
                                                                    <label class="mb-0">@minute</label>
                                                                </div>
                                                                <div class="col-md-6 timeline-item d-none d-md-inline-block text-center">
                                                                    <img class="event-team-badge" src="@(item1 < 0 ? Model.HomeTeam.TeamLogo : Model.AwayTeam.TeamLogo)">
                                                                </div>
                                                            </div>
                                                            <div class="d-block">
                                                                <div class="row">
                                                                    <div class="col-md-4 timeline-item">
                                                                        <img class="img-@item2.EventType.ToLowerInvariant()" />
                                                                    </div>
                                                                    <div class="col-md-8 timeline-item d-none d-md-inline-block text-center">
                                                                        <label class="mb-0" style="font-size: 10px; transform: translateY(30%);">@validEvents[item2.EventType]</label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            @{
                                                                if (item2.Player1 != null)
                                                                {
                                                                    <div class="row">

                                                                        @{
                                                                            if (item2.Player2 != null)
                                                                            {
                                                                                <div class="col-md-6 timeline-item border-right">
                                                                                    <label class="mb-0" style="font-size: 10px;"><strong>@item2.Player1.FullName</strong></label>
                                                                                </div>
                                                                                <div class="col-md-6 timeline-item">
                                                                                    <label class="mb-0" style="font-size: 10px;"><strong>@item2.Player2.FullName</strong></label>
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="col-md-12">
                                                                                    <label class="mb-0" style="font-size: 10px;"><strong>@item2.Player1.FullName</strong></label>
                                                                                </div>
                                                                            }
                                                                        }
                                                                    </div>
                                                                }
                                                            }

                                                            <i></i>
                                                        </div>
                                                        <div class="timeline-inner-event-type">
                                                            <img class="img-@item2.EventType.ToLowerInvariant()">
                                                        </div>
                                                    </div>
                                                </div>

                                                i++;
                                            }

                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="col-md-2">
            @{
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <h5 class="card-header text-center" style="background-color: @awayDomColor2; color: @awayDomColor1">
                            SUBS
                        </h5>
                        <div class="card-body">
                            @{ await Html.RenderPartialAsync("Match/_TeamLineup", Model.MatchEvent.MatchLineup.AwayTeamLineup.Where(w => !w.StartingXI), new ViewDataDictionary(ViewData) { { "background-color", awayDomColor2 }, { "color", awayDomColor1 } }); }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.6.0/mdb.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

    });
</script>